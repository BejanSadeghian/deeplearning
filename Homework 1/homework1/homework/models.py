# -*- coding: utf-8 -*-
"""models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nfA1UqmkG1GX-r9xWq8UalSDh7QwQTh
"""


import torch
import torch.nn.functional as F


class ClassificationLoss(torch.nn.Module):
    def forward(self, input, target):
        """
        Your code here

        Compute mean(-log(softmax(input)_label))

        @input:  torch.Tensor((B,C))
        @target: torch.Tensor((B,), dtype=torch.int64)

        @return:  torch.Tensor((,))

        Hint: Don't be too fancy, this is a one-liner
        """
        return F.nll_loss(F.log_softmax(input), target).mean()


class LinearClassifier(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.linear1 = torch.nn.Linear(3*64*64,6)
        torch.nn.init.normal_(self.linear1.weight, std=0.01)
        torch.nn.init.normal_(self.linear1.bias, std=0.01)

    def forward(self, x):
        """
        Your code here

        @x: torch.Tensor((B,3,64,64))
        @return: torch.Tensor((B,6))
        """
        x = x.view(-1, 3*64*64)
        return self.linear1(x)


class MLPClassifier(torch.nn.Module):
    def __init__(self):
        super().__init__()

        """
        Your code here
        """
        i_1, o_1 = (3*64*64, 32)
        i_2, o_2 = (o_1, 128)
        i_3, o_3 = (o_2, 128)
        i_4, o_4 = (o_3, 6)
        self.model = torch.nn.Sequential(
                torch.nn.Linear(i_1, o_1),
                torch.nn.ReLU(),
                torch.nn.Linear(i_2, o_2),
                torch.nn.ReLU(),
                torch.nn.Linear(i_3, o_3),
                torch.nn.ReLU(),
                torch.nn.Linear(i_4, o_4),
                torch.nn.ReLU()
                )

#        self.model = torch.nn.Sequentiial(
#                torch.nn.Conv2d(3,10,3),
#                torch.nn.MaxPool2d(2)
#                torch.nn.ReLU(),
#                torch.nn.Linear()
#                )
        
        

    def forward(self, x):
        """
        Your code here

        @x: torch.Tensor((B,3,64,64))
        @return: torch.Tensor((B,6))
        """
        x = x.view(-1, 3*64*64) #Reshape so each obs is flattened
        return self.model(x)


model_factory = {
    'linear': LinearClassifier,
    'mlp': MLPClassifier,
}


def save_model(model):
    from torch import save
    from os import path
    for n, m in model_factory.items():
        if isinstance(model, m):
            return save(model.state_dict(), path.join(path.dirname(path.abspath(__file__)), '%s.th' % n))
    raise ValueError("model type '%s' not supported!" % str(type(model)))


def load_model(model):
    from torch import load
    from os import path
    r = model_factory[model]()
    r.load_state_dict(load(path.join(path.dirname(path.abspath(__file__)), '%s.th' % model), map_location='cpu'))
    return r


